@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class AiPlayer<T> {
  + naming(): void
}
interface Card << interface >>
enum Color << enumeration >> {
  + BLUE: 
  + YELLOW: 
  + RED: 
  + GREEN: 
  + values(): Color[]
  + valueOf(String): Color
}
class Deck<T> {
  # cards: List<T>
  + drawCard(): T
  + isEmpty(): boolean
  + shuffle(): void
  + initCards(): Deck<T>
}
class Game<T> {
  ~ players: List<Player<T>>
  + createDeck(): Deck<T>
  + initPlayers(int): void
  + contest(): Player<T>
  + dispatchCards(): void
}
class Hand<T>
class Main {
  + main(String[]): void
  - unoGame(): void
  - showdown(): void
}
class Player<T> {
  # hand: Hand<T>
  - name: String
  - score: int
  + getScore(): int
  + toString(): String
  + setName(String): void
  + scoreIncremental(): void
  + getName(): String
  + getHand(): Hand<T>
  + naming(): void
  + showCard(): T
  + addCard(T): void
}
enum Rank << enumeration >> {
  + _6: 
  + _9: 
  - value: int
  + _7: 
  + _3: 
  + J: 
  + T: 
  + _8: 
  + A: 
  + _5: 
  + Q: 
  + _2: 
  + _4: 
  + K: 
  + values(): Rank[]
  + getValue(): int
  + valueOf(String): Rank
  + fromValue(int): Rank?
}
class RealPlayer<T> {
  + naming(): void
}
class ShowDown {
  - log: Logger
  ~ deck: Deck<ShowDownCard>
  + createDeck(): Deck<ShowDownCard>
  + contest(): Player<ShowDownCard>
  + dispatchCards(): void
}
class ShowDownCard {
  ~ comparator: Comparator<ShowDownCard>
  - rank: Rank
  - suit: Suit
  + compareTo(ShowDownCard): int
  + getRank(): Rank
  + getSuit(): Suit
  + toString(): String
  + rankValue(): int
}
class ShowdownDeck {
  + initCards(): ShowdownDeck
}
enum Suit << enumeration >> {
  + H: 
  + D: 
  + S: 
  + C: 
  + values(): Suit[]
  + valueOf(String): Suit
}
class Uno {
  ~ deck: UnoDeck
  + contest(): Player<UnoCard>
  + createDeck(): UnoDeck
  - compareAndReplace(UnoCard, Player<UnoCard>): UnoCard
  - match(UnoCard, UnoCard): boolean
  + dispatchCards(): void
}
class UnoCard {
  - color: Color
  - number: int
  + getColor(): Color
  + getNumber(): int
}
class UnoDeck {
  + initCards(): UnoDeck
  + shuffleExcept(UnoCard): void
}

AiPlayer      -[#595959,dashed]->  Card         
AiPlayer      -[#595959,dashed]->  Hand         : "«create»"
AiPlayer      -[#000082,plain]-^  Player       
Game          -[#595959,dashed]->  AiPlayer     : "«create»"
Game          -[#595959,dashed]->  Card         
Game         "1" *-[#595959,plain]-> "players\n*" Player       
Hand          -[#595959,dashed]->  Card         
Main          -[#595959,dashed]->  ShowDown     : "«create»"
Main          -[#595959,dashed]->  Uno          : "«create»"
Player        -[#595959,dashed]->  Card         
Player       "1" *-[#595959,plain]-> "hand\n1" Hand         
RealPlayer    -[#595959,dashed]->  Card         
RealPlayer    -[#000082,plain]-^  Player       
ShowDown     "1" *-[#595959,plain]-> "deck\n1" Deck         
ShowDown      -[#000082,plain]-^  Game         
ShowDown      -[#595959,dashed]->  ShowdownDeck : "«create»"
ShowDownCard  -[#008200,dashed]-^  Card         
ShowDownCard "1" *-[#595959,plain]-> "rank\n1" Rank         
ShowDownCard "1" *-[#595959,plain]-> "suit\n1" Suit         
ShowdownDeck  -[#000082,plain]-^  Deck         
ShowdownDeck  -[#595959,dashed]->  ShowDownCard : "«create»"
Uno           -[#000082,plain]-^  Game         
Uno           -[#595959,dashed]->  UnoDeck      : "«create»"
Uno          "1" *-[#595959,plain]-> "deck\n1" UnoDeck      
UnoCard       -[#008200,dashed]-^  Card         
UnoCard      "1" *-[#595959,plain]-> "color\n1" Color        
UnoDeck       -[#000082,plain]-^  Deck         
UnoDeck       -[#595959,dashed]->  UnoCard      : "«create»"
@enduml
